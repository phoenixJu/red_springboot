spring最核心的两个功能是aop和ioc，即面向切面，控制反转
AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果
1.连接点（Joinpoint）
  程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后
2.切点（Pointcut）
  AOP通过“切点”定位特定的连接点。切点和连接点不是一对一的关系，一个切点可以匹配多个连接点
3.通知（Advice）
  切面的工作被称为通知。是织入到目标类连接点上的一段程序代码。
4.切面（Aspect）
  切面由切点和通知（引介）组成，它既包括了横切逻辑的定义，也包括了连接点的定义。
5.织入（Weaving）
  织入是把切面应用到目标对象并创建新的代理对象的过程。

实现：在spring-boot中，我们可以直接使用aop而不需要任何的配置
1.jar包
  spring-boot-starter-aop
2.定义切面 @Aspect
3.指定切点：  @Pointcut注解中的execution表达式: public * com.demo.*.*(..)
4.通知类型设定 @Around("webLog()")
4.返回值为拦截方法的返回值：Object result = joinPoint.proceed();

